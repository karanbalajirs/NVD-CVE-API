from djongo import models
from django.core.validators import URLValidator
class Description(models.Model):
    lang = models.CharField(max_length=3)
    value = models.CharField(max_length=200)

    class Meta:
        abstract = True
class cvssData(models.Model):
    version = models.CharField(max_length=5)
    vectorString = models.CharField(max_length=40)
    #attackVector = models.CharField(max_length=20,null=True)
    #attackComplexity = models.CharField(max_length=20,null=True)
    accessVector = models.CharField(max_length=20,null=True)
    accessComplexity = models.CharField(max_length=5,null=True)
    authentication = models.CharField(max_length=10,null=True)
    #privilegesRequired =  models.CharField(max_length=20,null=True)
    #userIneracation = models.CharField(max_length=10,null=True)
    #scope = models.CharField(max_length=20,null=True)
    confidentialityImpact = models.CharField(max_length=20)
    integrityImpact = models.CharField(max_length=20)
    availabilityImpact = models.CharField(max_length=20)
    baseScore = models.FloatField()
    #baseSeverity = models.CharField(max_length=100,blank=True,null=True)
    
    class Meta:
        abstract = True
class cvssData1(models.Model):
    version = models.CharField(max_length=5)
    vectorString = models.CharField(max_length=40)
    attackVector = models.CharField(max_length=20,null=True)
    attackComplexity = models.CharField(max_length=20,null=True)
    #accessVector = models.CharField(max_length=20,null=True)
    #accessComplexity = models.CharField(max_length=5,null=True)
    #authentication = models.CharField(max_length=10,null=True)
    userInteraction = models.CharField(max_length=10,null=True)
    privilegesRequired =  models.CharField(max_length=20,null=True)
    scope = models.CharField(max_length=20,null=True)
    confidentialityImpact = models.CharField(max_length=20)
    integrityImpact = models.CharField(max_length=20)
    availabilityImpact = models.CharField(max_length=20)
    baseScore = models.FloatField()
    baseSeverity = models.CharField(max_length=100,blank=True,null=True)
    
    class Meta:
        abstract = True

class cvssV2(models.Model):
    source = models.CharField(max_length=20)
    type = models.CharField(max_length=20)
    cvssData = models.EmbeddedField(model_container=cvssData,null=True)
    baseSeverity = models.CharField(max_length=10)
    exploitabilityScore = models.FloatField()
    impactScore = models.FloatField()
    acInsufInfo = models.BooleanField()
    obtainAllPrivilege = models.BooleanField()
    obtainUserPrivilege = models.BooleanField()
    obtainOtherPrivilege = models.BooleanField()
    userInteractionRequired = models.BooleanField(default=False)
    def __str__(self):
        return self.userInteractionRequired if self.userInteractionRequired else "None"
    class Meta:
        abstract = True
class cvssMetricV2(models.Model):
    cvssMetricV2 = models.ArrayField(model_container=cvssV2,null=True)
    class Meta:
        abstract = True

class cvssV31(models.Model):
    source = models.CharField(max_length=20)
    type = models.CharField(max_length=20)
    cvssData = models.EmbeddedField(model_container=cvssData1,null=True)
    exploitabilityScore = models.FloatField()
    impactScore = models.FloatField()
    class Meta:
        abstract = True
class cvssMetricV31(models.Model):
    cvssMetricV31 = models.ArrayField(model_container=cvssV31)
    class Meta:
        abstract = True

class cvssV30(models.Model):
    source = models.CharField(max_length=20)
    type = models.CharField(max_length=20)
    cvssData = models.EmbeddedField(model_container=cvssData1,null=True)
    exploitabilityScore = models.FloatField()
    impactScore = models.FloatField()
    class Meta:
        abstract = True
class cvssMetricV30(models.Model):
    cvssMetricV30 = models.ArrayField(model_container=cvssV30)
    class Meta:
        abstract = True

class Weakness(models.Model):
    source = models.CharField(max_length=20)
    type = models.CharField(max_length=20)
    description = models.ArrayField(model_container=Description)

    class Meta:
        abstract =True

class cpeMatch(models.Model):
    vulnerable = models.BooleanField()
    criteria = models.CharField(max_length=200)
    matchCriteriaId = models.CharField(max_length=100)

    class Meta:
        abstract =True

class Nodes(models.Model):
    operator = models.CharField(max_length=10)
    negate = models.BooleanField()
    cpeMatch = models.ArrayField(model_container=cpeMatch)

    class Meta:
        abstract =True

class nodes(models.Model):
    nodes = models.ArrayField(model_container=Nodes)

    class Meta:
        abstract = True

class References(models.Model):
    url = models.URLField(validators=[URLValidator])
    source = models.CharField(max_length=20)

    class Meta:
        abstract = True

class CVE(models.Model):
    id =   models.CharField(max_length=20,primary_key=True)
    sourceIdentifier = models.CharField(max_length=20)
    published = models.DateTimeField()
    lastModified = models.DateTimeField()
    vulnStatus = models.CharField(max_length=20)
    description  = models.ArrayField(model_container=Description)
    metrics2 = models.EmbeddedField(model_container=cvssMetricV2,blank=True,null=True)
    metrics30 = models.EmbeddedField(model_container=cvssMetricV30,blank=True,null=True) 
    metrics31 = models.EmbeddedField(model_container=cvssMetricV31,blank=True,null=True)
    weaknesses = models.ArrayField(model_container=Weakness)
    configurations = models.ArrayField(model_container=nodes)
    references =  models.ArrayField(model_container=References)
    
class count(models.Model): #to store lastupdated time and number of data in the mongodb
    lastupdated = models.DateTimeField()
    count = models.IntegerField()