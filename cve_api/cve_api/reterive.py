import pymongo
from math import ceil
import re
from datetime import datetime,timedelta
import pytz
client = pymongo.MongoClient("mongodb://localhost:27017/")  #client
database = client["djongo_test"]   #dbconnection
collection = database["cve_api_cve"] #collection main
col1 = database["cve_api_count"] #collection for lastupdated
def reterive(request,page,limit,sort,year,rej,cvid,lst):
    query = {} #for filter
    count  = col1.find_one(sort=[("_id",pymongo.DESCENDING)]) #last count value
    pages = count['count']
    pages = pages/limit
    pages= ceil(pages)
    if(page > pages):
        page = pages
    page = page-1
    query = None
    r = '' #for checking 
    if(rej == 'False'):
        pass
    elif(rej =='True'):
        r = "Rejected"
    if(len(year) == 4 and (cvid == '0' or cvid =='') and (lst == 0) ):
        pattern = re.compile(r"CVE-{}-\d+".format(year), re.IGNORECASE) #year filter using regex
        query={"$and": [
        {"vulnStatus": {"$ne": r}},
        {"id": {"$regex": pattern}}]}
    elif(cvid != '0' and cvid != '' and lst == 0 ):
        print(cvid,"Hello")
        pattern = re.compile(r"[\w\W]*{}[\w\W]*".format(cvid),re.IGNORECASE) #year filter using cvid
        query={"$and": [
        {"vulnStatus": {"$ne": r}},
        {"id": {"$regex": pattern}}]}
    elif(lst != 0):
        date =datetime.now(pytz.utc)
        date = date -timedelta(days=lst) #lastmodified time filter
        query={"$and": [
        {"vulnStatus": {"$ne": r}},
        {"lastModified": {"$gte": date}}]}
    if(page < 0):
        page = 0
    # Sort and Filter (1,2,3,4 specifies asc sort for fields and negative value for desc)
    if(sort == 0  and (len(year) == 4 or (cvid != '0' and cvid != "") or (lst !=0) )):
        documents = collection.find(query).skip(page*limit).limit(limit)
        return list(documents), collection.count_documents(query)
    elif(sort == 1 and (len(year) == 4 or( cvid != '0' and cvid != "") or (lst !=0))):
        documents = collection.find(query).sort('id',pymongo.ASCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents(query)   
    elif(sort == 2  and (len(year) == 4 or ( cvid != '0' and cvid != "") or (lst !=0))):
        documents = collection.find(query).sort('published',pymongo.ASCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents(query)
    elif(sort == 3  and (len(year) == 4 or (cvid != '0' and cvid != "") or (lst !=0))):
        documents = collection.find(query).sort('lastModified',pymongo.ASCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents(query)
    elif(sort == 4 and (len(year) == 4 or (cvid != '0'  and cvid != "") or (lst !=0))):
        documents = collection.find(query).sort('metrics2.cvssMetricV2.0.cvssData.baseScore',pymongo.ASCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents(query)
    elif(sort == -1 and (len(year) == 4 or (cvid != '0' and cvid != "") or (lst !=0))):
        documents = collection.find(query).sort('id',pymongo.DESCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents(query)    
    elif(sort == -2 and (len(year) == 4 or (cvid != '0' and cvid != "") or (lst !=0))):
        documents = collection.find(query).sort('published',pymongo.DESCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents(query)
    elif(sort == -3 and (len(year) == 4 or ( cvid != '0' and cvid != "")  or (lst !=0))):
        documents = collection.find(query).sort('lastModified',pymongo.DESCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents(query)
    elif(sort == -4 and (len(year) == 4 or (cvid != '0' and cvid != "") or (lst !=0))):
        documents = collection.find(query).sort('metrics2.cvssMetricV2.0.cvssData.baseScore',pymongo.DESCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents(query)
    #only sort no filter (1,2,3,4 specifies asc sort for fields and negative value for desc)
    elif(sort == 0  ):
        documents = collection.find({'vulnStatus':{"$ne":'Rejected'}}).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents({'vulnStatus':{"$ne":r}})
    elif(sort == 1 ):
        documents = collection.find().sort('id',pymongo.ASCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents({'vulnStatus':{"$ne":r}})    
    elif(sort == 2  ):
        documents = collection.find().sort('published',pymongo.ASCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents({'vulnStatus':{"$ne":r}})
    elif(sort == 3  ):
        documents = collection.find().sort('lastModified',pymongo.ASCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents({'vulnStatus':{"$ne":r}})
    elif(sort == 4  ):
        documents = collection.find().sort('metrics2.cvssMetricV2.0.cvssData.baseScore',pymongo.ASCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents({'vulnStatus':{"$ne":r}})
    elif(sort == -1):
        documents = collection.find().sort('id',pymongo.DESCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents({'vulnStatus':{"$ne":r}})   
    elif(sort == -2 ):
        documents = collection.find().sort('published',pymongo.DESCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents({'vulnStatus':{"$ne":r}})
    elif(sort == -3 ):
        documents = collection.find().sort('lastModified',pymongo.DESCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents({'vulnStatus':{"$ne":r}})
    elif(sort == - 4  ):
        documents = collection.find().sort('metrics2.cvssMetricV2.0.cvssData.baseScore',pymongo.DESCENDING).skip(page*limit).limit(limit)
        return list(documents),collection.count_documents({'vulnStatus':{"$ne":r}})

#to reterive second page
def reterive_specific(request,id):
    document = collection.find({"id":id})
    return list(document)