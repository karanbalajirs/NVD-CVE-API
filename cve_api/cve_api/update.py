#import models to get structure of the Database
from .models import Description, cvssData, cvssMetricV2, cvssMetricV31, Weakness, cpeMatch, nodes, References, CVE , count
from django.http import HttpResponse
import httpx
import time
from datetime import datetime
import math 


def a(request,num):
    #find total number of results
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?startIndex=0&resultsPerPage=1000"
    response = httpx.get(url)
    data1 = response.json()
    n = data1['totalResults']
    print(n)
    
    
    #find number of times to call the api
    s = n//1000
    s= math.ceil(s)
    #invloke api calls one by one 
    for i in range(num,s+1):
        time.sleep(3)
        try:
            url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?startIndex={i*1000}&resultsPerPage=1000"
            response = httpx.get(url)
            data = response.json()
            print(i)
            #parse each and every array in vulnerability
            for j in data['vulnerabilities']:
                try :
                    #Store it in model structure
                    cv = j['cve']
                    print(cv['id'])
                    cve = CVE(
                        id=cv['id'],
                        sourceIdentifier=cv['sourceIdentifier'],
                        published=cv['published'],
                        lastModified=cv['lastModified'],
                        vulnStatus= cv['vulnStatus']
                    )
                    
                    
                    cve.description =  cv['descriptions']#[{'lang':'en','value':'Descritptions '}]
                    if('weaknesses' in cv):
                        cve.weaknesses = cv['weaknesses']
                    if('cvssMetricV2' in cv['metrics']):
                        cve.metrics2 = cv['metrics']
                    if('cvssMetricV31' in cv['metrics']):
                        cve.metrics31 = cv['metrics']
                    if('cvssMetricV30' in cv['metrics']):
                        cve.metrics30 = cv['metrics']
                    if('configurations' in cv):
                        cve.configurations = cv['configurations']
                    if('references' in cv):
                        cve.references = cv['references']
                    cve.save()
                #to skip exception
                except Exception as e:
                    print(cv['id'],e)
                    continue
        #to skip exception
        except Exception as e:
            print(e,i)
            time.sleep(5)
            a(request,i)
    #Add lastupdated time to the database
    k=0
    while(k != 3):
        try:
            co = count()
            co.count = CVE.objects.count()
            co.lastupdated = datetime.now()
            co.save()
            break;
        except Exception as e:
            k+=1
            print(e);
    return HttpResponse("Finished")

